#ifndef GPU_COMMON_H
#define GPU_COMMON_H

#define HAS_BASE_COLOR_TEXTURE (1 << 0)

struct ObjectUniforms
{
  mat4 model;
  uint materialIdx;
};

struct Material
{
  uint flags;
  float alphaCutoff;
  uvec2 baseColorTextureHandle;
  vec4 baseColorFactor;
};

struct BoundingBox
{
  vec3 offset;
  vec3 halfExtent;
};

struct DrawIndexedIndirectCommand
{
  uint indexCount;
  uint instanceCount;
  uint firstIndex;
  int vertexOffset;
  uint firstInstance;
};

layout(binding = 0, std140) uniform GlobalUniforms
{
  mat4 viewProj;
  mat4 invViewProj;
  vec4 cameraPos;
}globalUniforms;

// Uniforms for each object.
layout(binding = 0, std430) readonly restrict buffer ObjectUniformsBuffer
{
  ObjectUniforms objects[];
};

// List of materials. Indexed with object.materialIdx
layout(binding = 1, std430) readonly restrict buffer MaterialUniforms
{
  Material materials[];
};

// One bounding box for every object.
layout(binding = 2, std430) readonly restrict buffer BoundingBoxesBuffer
{
  BoundingBox boundingBoxes[];
};

// The indices of objects that were not culled in the initial frustum culling pass.
// They should be used to index 'objects' and 'boundingBoxes'
layout(binding = 3, std430) readonly restrict buffer ObjectIndicesBuffer
{
  uint count;
  uint array[];
}objectIndices;

// The draw commands generated by the frustum culling pass.
layout(binding = 4, std430) writeonly restrict buffer DrawCommandsBuffer
{
  DrawIndexedIndirectCommand drawCommands[];
};

#endif // GPU_COMMON_H